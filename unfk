#!/bin/bash

set -o pipefail

usage()
{
    cat - <<EOF
unfk - Remove all `f**k`s in your git commit history
options:
    [-h|--help] [-q|--quiet|-v|--verbose] [--install|--uninstall]
    [-n|--dry-run|-f|--fix] [(-t|-target) <substitute>] [-e <word>]...
    [(-- <rev-list options>... | <ref>...) [-- <file>...]]
EOF
}

WORDS=()
REFS=()
VERBOSE=10
TARGET="****"
while [ "$#" -gt 0 ]; do
    case "$1" in
        -h|--help)
            usage
            exit
            ;;
        --filter-branch)
            AUTOMATED=YES
            shift
            ;;
        --install)
            INSTALL=INSTALL
            shift
            ;;
        --uninstall)
            INSTALL=UNINSTALL
            shift
            ;;
        -q|--quiet)
            VERBOSE=0
            shift
            ;;
        -v|--verbose)
            VERBOSE=100
            shift
            ;;
        -n|--dry-run)
            FIX=
            shift
            ;;
        -f|--fix)
            FIX=YES
            shift
            ;;
        -t|--target)
            TARGET="$2"
            shift
            shift
            ;;
        -e)
            WORDS+=("$2")
            shift
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            REFS+=("$1")
            shift
            ;;
    esac
done

REVARGS=()
if [ "${#REFS[@]}" -ne "0" ]; then
    for R in "${REFS[@]}"; do
        REVARGS+=("$R^!")
    done
else
    while [ "$#" -gt 0 ]; do
        case "$1" in
            --)
                shift
                break
                ;;
            *)
                REVARGS+=("$1")
                shift
                ;;
        esac
    done
fi

# "$@" are <files>

if [ "${#WORDS[@]}" -eq "0" ]; then
    # List of common slangs
    WORDS=( \
        $'\x66\x75\x63\x6b' \
        $'\x73\x68\x69\x74' \
        $'\x62\x69\x74\x63\x68' \
    )
fi

GIT_DIR=$(git rev-parse --git-dir)
if [ "$?" -ne "0" ]; then
    echo "I can't find git-dir" >&2
    exit 2
fi
GIT="git --no-pager --git-dir=$GIT_DIR"

if [ "$INSTALL" = "INSTALL" ]; then
    if [ "$VERBOSE" -gt "0" ]; then
        echo "Installing unfk as git pre-commit hook..." >&2
    fi
    which unfk >/dev/null
    if [ "$?" -ne "0" ]; then
        echo "Warning: unfk is not found in PATH, pre-commit hook may fail to run" >&2
    fi
    mkdir -p "$GIT_DIR/hooks/"
    HK="$GIT_DIR/hooks/pre-commit"
    if [ -f "$HK" ]; then
        echo "Moving exiting hook" >&2
        if [ -f "$HK.bak" ]; then
            echo "I can't move exiting hook: bak exists" >&2
            exit 2
        fi
        mv "$HK" "$HK.bak"
        if [ "$?" -ne "0" ]; then
            echo "I can't move exiting hook" >&2
            exit 2
        fi
    fi
    cat - <<EOF >$HK
#!/bin/sh

exec unfk
EOF
    chmod +x "$HK"
    if [ "$VERBOSE" -gt "15" ]; then
        echo "unfk installed to" "$HK" >&2
    fi
    if [ "$VERBOSE" -gt "0" ]; then
        echo "Done installing unfk." >&2
    fi
    exit 0
fi

if [ "$INSTALL" = "UNINSTALL" ]; then
    if [ "$VERBOSE" -gt "0" ]; then
        echo "Uninstalling unfk as git pre-commit hook..." >&2
    fi
    HK="$GIT_DIR/hooks/pre-commit"
    if [ -f "$HK" ]; then
        if [ "$(tail -n 1 "$HK")" != "exec unfk" ]; then
            echo "The hook is not unfk, won't remove" >&2
            exit 2
        fi
        rm "$HK"
        if [ "$?" -ne "0" ]; then
            echo "I can't remove exiting hook" >&2
            exit 2
        fi
        if [ -f "$HK.bak" ]; then
            echo "Warning: you may want to recover old hooks" >&2
        fi
    else
        echo "I can't remove exiting hook: file not exist" >&2
        exit 2
    fi
    if [ "$VERBOSE" -gt "15" ]; then
        echo "unfk uninstalled from" "$HK" >&2
    fi
    if [ "$VERBOSE" -gt "0" ]; then
        echo "Done uninstalling unfk." >&2
    fi
    exit 0
fi

UNFIXED=

SED_SCRIPT=
MAGIC=$'\x02'
for E in "${WORDS[@]}"; do
    SED_SCRIPT="$SED_SCRIPT s${MAGIC}$E${MAGIC}$TARGET${MAGIC}g;"
done

fix-file-index() {
    FILE="$1"
    if [ "$VERBOSE" -gt "0" ]; then
        echo "Fixing $FILE" >&2
    fi
    MODE=$($GIT ls-files -s -- "$FILE" | cut -d ' ' -f 1)
    if [ -z "$MODE" ]; then
        echo "Can't ls-file on $FILE" >&2
        return 2
    fi
    SHA1=$($GIT ls-files -s -- "$FILE" | cut -d ' ' -f 2)
    if [ "$VERBOSE" -gt "15" ]; then
        echo "Got old $MODE,$SHA1,$FILE" >&2
    fi
    if [ "$VERBOSE" -gt "15" ]; then
        echo "Will run sed $(printf '%q' "$SED_SCRIPT") on $FILE" >&2
    fi
    NSHA1=$($GIT cat-file blob "$SHA1" | sed "$SED_SCRIPT" | $GIT hash-object -w --stdin)
    if [ "$VERBOSE" -gt "15" ]; then
        echo "Got new $MODE,$NSHA1,$FILE" >&2
    fi
    $GIT update-index --cacheinfo "$MODE,$NSHA1,$FILE"
    return 0
}

fix-index() {
    EARGS=()
    for E in "${WORDS[@]}"; do
        EARGS+=("-e")
        EARGS+=("$E")
    done
    if [ "$VERBOSE" -gt "15" ]; then
        echo "Checking" "${EARGS[@]}" "in index file names against" -- "$@" >&2
    fi
    TMP=$(mktemp)
    $GIT ls-files --cached -- "$@" | grep --color=always --ignore-case "${EARGS[@]}" >$TMP
    if [ "$?" -eq "0" ]; then
        echo "Warning: Found slangs in file names, manual fix is necessary" >&2
        UNFIXED=YES
    elif [ "$?" -ne "1" ]; then
        echo "Errored in grep" >&2
        rm -f "$TMP"
        return 2
    fi
    if [ "$VERBOSE" -gt "0" ]; then
        cat "$TMP"
    fi
    if [ "$VERBOSE" -gt "15" ]; then
        echo "Checking" "${EARGS[@]}" "in index file content against" -- "$@" >&2
    fi
    $GIT grep --color=always --cached -I --ignore-case "${EARGS[@]}" -- "$@" >$TMP
    if [ "$?" -eq "0" ]; then
        if [ "$VERBOSE" -gt "0" ]; then
            cat "$TMP"
        fi
        if [ ! -z "$FIX" ]; then
            if [ "$VERBOSE" -gt "15" ]; then
                echo "Found slangs, trying to fix" >&2
            fi
            $GIT grep --cached --name-only -I --ignore-case "${EARGS[@]}" -- "$@" >$TMP
            while IFS= read -r FILE
            do
                fix-file-index "$FILE"
                if [ "$?" -ne "0" ]; then
                    UNFIXED=YES
                fi
            done < "$TMP"
        else
            if [ "$VERBOSE" -gt "15" ]; then
                echo "Found slangs" >&2
            fi
            rm -f "$TMP"
            return 1
        fi
    elif [ "$?" -ne "1" ]; then
        echo "Errored in git grep" >&2
        rm -f "$TMP"
        return 2
    fi
    rm -f "$TMP"
    if [ -z "$UNFIXED" ]; then
        return 0
    else
        return 1
    fi
}

if [ "${#REVARGS[@]}" -eq "0" ]; then
    fix-index "$@"
    RES="$?"
    if [ -z "$AUTOMATED" ]; then
        exit "$RES"
    elif [ "$RES" -eq "0" ]; then
        exit 0
    elif [ "$RES" -eq "1" ]; then
        exit 0
    else
        exit "$RES"
    fi
fi

if [ -z "$0" ]; then
    echo "Error: I don't exist, please don't use the \`curl | bash\` magic!" >&2
    exit 2
fi
which unfk >/dev/null
if [ "$?" -ne "0" ]; then
    echo "Error: unfk is not found in PATH" >&2
    exit 2
fi

if [ "$VERBOSE" -gt "15" ]; then
    INDF=" -v"
elif [ "$VERBOSE" -gt "0" ]; then
    INDF=""
else
    INDF=" -q"
fi
INDF="$INDF -t $(printf '%q' "$TARGET")"
for E in "${WORDS[@]}"; do
    INDF="$INDF -e $(printf '%q' "$E")"
done
INDF="$INDF --"
REVARGS+=("--")
while [ "$#" -gt "0" ]; do
    INDF="$INDF $(printf '%q' "$1")"
    REVARGS+=("$1")
    shift
done
if [ ! -z "$FIX" ]; then
    INDF="$(printf '%q' "$0") -f --filter-branch$INDF"
else
    INDF="$(printf '%q' "$0") -n --filter-branch$INDF"
fi
INDF="echo '' && $INDF"

MSGF="sed $(printf '%q' "$SED_SCRIPT")"
if [ "$VERBOSE" -gt "15" ]; then
    echo "rev-list args:$(printf ' %q' "${REVARGS[@]}")" >&2
    echo "msg-filter:" "$MSGF" >&2
    echo "index-filter:" "$INDF" >&2
fi

$GIT filter-branch --msg-filter "$MSGF" --index-filter "$INDF" -- "${REVARGS[@]}"
exit "$?"
