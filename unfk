#!/bin/bash

set -uo pipefail

usage()
{
    cat - <<EOF
unfk - Remove all f**ks in your git commit history
options:
    [-h|--help] [-q|--quiet|-v|--verbose] [-I|--install|-U|--uninstall]
    [-n|--dry-run|-f|--fix] [(-t|--target) <substitute>] [-e <word>]...
    [-- <file>...]
EOF
}

INSTALL=
VERBOSE=
FIX=
WORDS=()
VERBOSE=10
TARGET="****"
while [ "$#" -gt 0 ]; do
    case "$1" in
        -h|--help)
            usage
            exit
            ;;
        -I|--install)
            INSTALL=INSTALL
            shift
            ;;
        -U|--uninstall)
            INSTALL=UNINSTALL
            shift
            ;;
        -q|--quiet)
            VERBOSE=0
            shift
            ;;
        -v|--verbose)
            VERBOSE=100
            shift
            ;;
        -n|--dry-run)
            FIX=
            shift
            ;;
        -f|--fix)
            FIX=YES
            shift
            ;;
        -t|--target)
            TARGET="$2"
            shift
            shift
            ;;
        -e)
            WORDS+=("$2")
            shift
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            printf 'What does %s mean?\n' "$1" >&2
            exit 2
            ;;
    esac
done

# "$@" are <files>

if [ "${#WORDS[@]}" -eq 0 ]; then
    # List of common slangs
    WORDS=( \
        $'\x66\x75\x63\x6b' \
        $'\x73\x68\x69\x74' \
        $'\x62\x69\x74\x63\x68' \
    )
fi

export PAGER=
export GIT_PAGER=
GIT_DIR="$(realpath "$(git rev-parse --git-dir)")"
if [ -z "$GIT_DIR" ]; then
    echo "I can't find git-dir" >&2
    exit 2
fi

PREFIX="$(git rev-parse --show-prefix)"
export GIT_DIR
if [ "$#" -eq 0 ]; then
    set -- :/
else
    [ "$VERBOSE" -gt 50 ] && printf 'PREFIX: %q\n' "$PREFIX" >&2
    eval "set $(git rev-parse --sq --prefix "$PREFIX" -- "$@")"
fi

[ "$VERBOSE" -gt 50 ] && printf 'To be fixed: %q\n' "$@" >&2

if [ "$VERBOSE" -gt 0 ]; then
    COLOR="--color=always"
else
    COLOR="--quiet"
fi

if [ "$INSTALL" = "INSTALL" ]; then
    if [ "$VERBOSE" -gt 0 ]; then
        echo "Installing unfk as git pre-commit hook..." >&2
    fi
    which unfk >/dev/null
    if [ "$?" -ne "0" ]; then
        echo "Warning: unfk is not found in PATH, pre-commit hook may fail to run" >&2
    fi
    mkdir -p "$GIT_DIR/hooks/"
    HK="$GIT_DIR/hooks/pre-commit"
    if [ -f "$HK" ] && [ "$(tail -n 1 "$HK" | cut -d ' ' -f 2 )" = "unfk" ]; then
        echo "Reinstalling" >&2
        rm -f "$HK"
    elif [ -f "$HK" ]; then
        echo "Moving exiting hook" >&2
        if [ -f "$HK.bak" ]; then
            echo "I can't move exiting hook: bak exists" >&2
            exit 2
        fi
        mv "$HK" "$HK.bak"
        if [ "$?" -ne "0" ]; then
            echo "I can't move exiting hook" >&2
            exit 2
        fi
    fi
    cat - <<EOF >$HK
#!/bin/sh

exec unfk -n -t $(printf '%q' "$TARGET")$(printf ' -e %q' "${WORDS[@]}")
EOF
    chmod +x "$HK"
    if [ "$VERBOSE" -gt 15 ]; then
        echo "unfk installed to" "$HK" >&2
    fi
    if [ "$VERBOSE" -gt 0 ]; then
        echo "Done installing unfk." >&2
    fi
    exit 0
fi

if [ "$INSTALL" = "UNINSTALL" ]; then
    if [ "$VERBOSE" -gt 0 ]; then
        echo "Uninstalling unfk as git pre-commit hook..." >&2
    fi
    HK="$GIT_DIR/hooks/pre-commit"
    if [ -f "$HK" ]; then
        if [ "$(tail -n 1 "$HK" | cut -d ' ' -f 2 )" != "unfk" ]; then
            echo "The hook is not unfk, won't remove" >&2
            exit 2
        fi
        rm "$HK"
        if [ "$?" -ne "0" ]; then
            echo "I can't remove exiting hook" >&2
            exit 2
        fi
        if [ -f "$HK.bak" ]; then
            echo "Warning: you may want to recover old hooks" >&2
        fi
    else
        echo "I can't remove exiting hook: file not exist" >&2
        exit 2
    fi
    if [ "$VERBOSE" -gt 15 ]; then
        echo "unfk uninstalled from" "$HK" >&2
    fi
    if [ "$VERBOSE" -gt 0 ]; then
        echo "Done uninstalling unfk." >&2
    fi
    exit 0
fi

UNFIXED=

SED_SCRIPT=
MAGIC=$'\x02'
for E in "${WORDS[@]}"; do
    SED_SCRIPT="$SED_SCRIPT s${MAGIC}$E${MAGIC}$TARGET${MAGIC}g;"
done

fix-file-index() {
    FILE="$1"
    [ "$VERBOSE" -gt 0 ] && printf 'Fixing %q\n' "$FILE" >&2
    MODE="$(git ls-files -s -- "$FILE" | cut -d ' ' -f 1)"
    if [ -z "$MODE" ]; then
        printf 'Failed to run git ls-file on %q\n' "$FILE" >&2
        return 2
    fi
    SHA1="$(git ls-files -s -- "$FILE" | cut -d ' ' -f 2)"
    [ "$VERBOSE" -gt 15 ] && printf 'Got old %q, %q, %q\n' "$MODE" "$SHA1" "$FILE" >&2
    [ "$VERBOSE" -gt 15 ] && printf 'Will run sed %s on %q\n' "$(printf '%q ' "$SED_SCRIPT")" "$FILE" >&2
    NSHA1="$(git cat-file blob "$SHA1" | sed "$SED_SCRIPT" | git hash-object -w --stdin)"
    [ "$VERBOSE" -gt 15 ] && printf 'Got new %q, %q, %q\n' "$MODE" "$NSHA1" "$FILE" >&2
    exec git update-index --cacheinfo "$MODE,$NSHA1,$FILE"
}

fix-index() {
    EARGS=(--ignore-case)
    for E in "${WORDS[@]}"; do
        EARGS+=("-e")
        EARGS+=("$E")
    done
    if [ "$VERBOSE" -gt 15 ]; then
        printf 'Checking ' >&2
        printf '%q ' "${EARGS[@]}" >&2
        printf 'in index file names among ' >&2
        printf '%q ' "$@" >&2
        printf '\n' >&2
    fi
    UNFIXED=
    git ls-files -s --cached -- "$@" | grep "$COLOR" "${EARGS[@]}"
    R="$?"
    if [ "$R" -eq 0 ]; then
        printf 'Warning: Found slangs in file names, manual fix is necessary\n' >&2
        UNFIXED=YES
    elif [ "$R" -ne "1" ]; then
        printf 'Errored in grep\n' >&2
        return 2
    fi
    if [ "$VERBOSE" -gt 15 ]; then
        printf 'Checking ' >&2
        printf '%q ' "${EARGS[@]}" >&2
        printf 'in index file content among ' >&2
        printf '%q ' "$@" >&2
        printf '\n' >&2
    fi
    git grep "$COLOR" --cached -I "${EARGS[@]}" -- "$@"
    R="$?"
    if [ "$R" -eq 0 ]; then
        if [ ! -z "$FIX" ]; then
            [ "$VERBOSE" -gt 15 ] && printf 'Found slangs, trying to fix\n' >&2
            git grep --cached --name-only -I "${EARGS[@]}" -- "$@" | (
                while IFS= read -r FILE; do
                    fix-file-index "$FILE" || UNFIXED=YES
                done
            )
        else
            [ "$VERBOSE" -gt 15 ] && printf 'Found slangs\n' >&2
            return 1
        fi
    elif [ "$R" -ne "1" ]; then
        printf 'Errored in git grep\n' >&2
        return 2
    fi
    [ -z "$UNFIXED" ] && return 0 || return 1
}

fix-index "$@"
exit "$?"
